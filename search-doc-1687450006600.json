[{"title":"Queue","type":0,"sectionRef":"#","url":"/UtilityModule/api/Queue","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#types","content":" "},{"title":"Queue​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#Queue","content":"&lt;/&gt; interface Queue { CurrentFunction: () → () | nil OnEmpty: RBXScriptSignal OnSwitch: RBXScriptSignal } The Queue class. "},{"title":"Properties​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#properties","content":" "},{"title":"CurrentFunction​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#CurrentFunction","content":"&lt;/&gt; Queue.CurrentFunction: () → () | nil The current function that's running.  "},{"title":"OnEmpty​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#OnEmpty","content":"&lt;/&gt; Queue.OnEmpty: RBXScriptSignal  Fires whenever the queue empties.  "},{"title":"OnSwitch​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#OnSwitch","content":"&lt;/&gt; Queue.OnSwitch: RBXScriptSignal  Fires whenever the queue switches functions. "},{"title":"Functions​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#Start","content":"&lt;/&gt; Queue.Start(self: Queue) → () Starts the queue and begins going through the functions.  "},{"title":"Clear​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#Clear","content":"&lt;/&gt; Queue.Clear(self: Queue) → () Clears all the queued functions.  "},{"title":"Pause​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#Pause","content":"&lt;/&gt; Queue.Pause(self: Queue) → () Pauses the queue from running further.  "},{"title":"Stop​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#Stop","content":"&lt;/&gt; Queue.Stop(self: Queue) → () Stops the queue and clears all queued functions.  "},{"title":"Add​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#Add","content":"&lt;/&gt; Queue.Add( self: Queue, func: () → ()-- The function to add to the queue. ) → () Adds a function to the queue.  "},{"title":"Remove​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#Remove","content":"&lt;/&gt; Queue.Remove( self: Queue, num: number-- The number of the function to remove. ) → () Removes a function from the queue.  "},{"title":"GetQueues​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#GetQueues","content":"&lt;/&gt; Queue.GetQueues(self: Queue) → {() → any} Returns a list of all queued functions.  "},{"title":"Destroy​","type":1,"pageTitle":"Queue","url":"/UtilityModule/api/Queue#Destroy","content":"&lt;/&gt; Queue.Destroy(self: Queue) → () Gets rid of the queue. "},{"title":"Countdown","type":0,"sectionRef":"#","url":"/UtilityModule/api/Countdown","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#types","content":" "},{"title":"Countdown​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#Countdown","content":"&lt;/&gt; interface Countdown { MaxCount: number Timer: number TimeToDrain: number TimerConsumption: number UpdateEvent: RBXScriptSignal OnCount: RBXScriptSignal OnFinished: RBXScriptSignal } The Countdown class. "},{"title":"Properties​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#properties","content":" "},{"title":"MaxCount​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#MaxCount","content":"&lt;/&gt; Countdown.MaxCount: number The Max the timer can reach.  "},{"title":"Timer​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#Timer","content":"&lt;/&gt; Countdown.Timer: number The timer value.  "},{"title":"TimeToDrain​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#TimeToDrain","content":"&lt;/&gt; Countdown.TimeToDrain: number The timer needed to wait before the countdown loweres.  "},{"title":"TimerConsuption​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#TimerConsuption","content":"&lt;/&gt; Countdown.TimerConsuption: number The amount the timer decrease by when being lowered.  "},{"title":"UpdateEvent​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#UpdateEvent","content":"&lt;/&gt; Countdown.UpdateEvent: RBXScriptSignal  The event that changes and listenes to the timer. Default is RunService.Heartbeat.  "},{"title":"OnCount​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#OnCount","content":"&lt;/&gt; Countdown.OnCount: RBXScriptSignal  Fires whenever the count lowers, returns the timer as a property.  "},{"title":"OnFinished​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#OnFinished","content":"&lt;/&gt; Countdown.OnFinished: RBXScriptSignal  Fires whenever the count reaches 0 or lower. "},{"title":"Functions​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#Start","content":"&lt;/&gt; Countdown.Start( self: Countdown, Count: number-- The optional starting count. ) → () Starts the countdown, if a count is provided, the timer will start on that number  "},{"title":"SetTimer​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#SetTimer","content":"&lt;/&gt; Countdown.SetTimer( self: Countdown, timer: number-- The count it should start at. ) → () Sets the timer to the number provided, resets tick.  "},{"title":"Pause​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#Pause","content":"&lt;/&gt; Countdown.Pause( self: Countdown, pauseTime: number?-- If provided, count ill restart after the number given. ) → () Pauses the countdown. If pauseTime is provided, restarts after yielding for that amount  "},{"title":"Stop​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#Stop","content":"&lt;/&gt; Countdown.Stop(self: Countdown) → () Stops the countdown. The timer will go back to the MaxCount caution If your timer does not have a MaxCount then it will error!  "},{"title":"Destroy​","type":1,"pageTitle":"Countdown","url":"/UtilityModule/api/Countdown#Destroy","content":"&lt;/&gt; Countdown.Destroy(self: Countdown) → () Gets rid of the countdown. "},{"title":"Tracker","type":0,"sectionRef":"#","url":"/UtilityModule/api/Tracker","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#types","content":" "},{"title":"Tracker​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#Tracker","content":"&lt;/&gt; interface Tracker { Origin: BasePart | Vector3 Target: BasePart | Vector3 Distance: NumberRange Magnitude: number Unit: Vector3 OnEnter: RBXScriptSignal OnLeave: RBXScriptSignal } The Tracker class. "},{"title":"Properties​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#properties","content":" "},{"title":"Origin​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#Origin","content":"&lt;/&gt; Tracker.Origin: BasePart | Vector3  The origin that the tracker will get its position from.  "},{"title":"Target​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#Target","content":"&lt;/&gt; Tracker.Target: BasePart | Vector3  The target the origin will track.  "},{"title":"Distance​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#Distance","content":"&lt;/&gt; Tracker.Distance: NumberRange  The min amd max distance the origin can have from the target.  "},{"title":"Magnitude​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#Magnitude","content":"&lt;/&gt; Tracker.Magnitude: number The distance between the origin and the tracker.  "},{"title":"Unit​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#Unit","content":"&lt;/&gt; Tracker.Unit: Vector3  The Unit vector between the origin and the tracker.  "},{"title":"OnEnter​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#OnEnter","content":"&lt;/&gt; Tracker.OnEnter: RBXScriptSignal  Fires whenever the tracker enters the distance range. caution This will not fire if the distance isn't provided.  "},{"title":"OnLeave​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#OnLeave","content":"&lt;/&gt; Tracker.OnLeave: RBXScriptSignal  Fires whenever the tracker leaves the distance range. caution This will not fire if the distance isn't provided. "},{"title":"Functions​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#functions","content":" "},{"title":"Start​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#Start","content":"&lt;/&gt; Tracker.Start(self: Tracker) → () Starts the tracking and begins updating the properties.  "},{"title":"Stop​","type":1,"pageTitle":"Tracker","url":"/UtilityModule/api/Tracker#Stop","content":"&lt;/&gt; Tracker.Stop(self: Tracker) → () Stop the tracker from running and updating its properties. "},{"title":"Meter","type":0,"sectionRef":"#","url":"/UtilityModule/api/Meter","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#types","content":" "},{"title":"Meter​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#Meter","content":"&lt;/&gt; interface Meter { Minimum: number Maximum: number IntegerOnly: boolean UIDisplayPercentage: boolean OnChanged: RBXScriptSignal OnEmpty: RBXScriptSignal OnFill: RBXScriptSignal UI: GuiBase2d } The Meter class. "},{"title":"Properties​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#properties","content":" "},{"title":"Minimum​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#Minimum","content":"&lt;/&gt; Meter.Minimum: number The Minimum the timer can reach.  "},{"title":"Maximum​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#Maximum","content":"&lt;/&gt; Meter.Maximum: number The Maximum the timer can reach.  "},{"title":"IntegerOnly​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#IntegerOnly","content":"&lt;/&gt; Meter.IntegerOnly: boolean Indicates if the number will always be an integer.  "},{"title":"UI​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#UI","content":"&lt;/&gt; Meter.UI: GuiBase2d  The UI that the meter will use.  "},{"title":"UIDisplayPercentage​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#UIDisplayPercentage","content":"&lt;/&gt; Meter.UIDisplayPercentage: boolean Determines if the UI will display a %number rather that number.  "},{"title":"OnChanged​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#OnChanged","content":"&lt;/&gt; Meter.OnChanged: RBXScriptSignal  Fires whenever the value changes.  "},{"title":"OnEmpty​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#OnEmpty","content":"&lt;/&gt; Meter.OnEmpty: RBXScriptSignal  Fires whenever the value is 0 or lower.  "},{"title":"OnFill​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#OnFill","content":"&lt;/&gt; Meter.OnFill: RBXScriptSignal  Fires whenever the value is at max. "},{"title":"Functions​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#functions","content":" "},{"title":"Destroy​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#Destroy","content":"&lt;/&gt; Meter.Destroy(self: Meter) → () Gets rid of the meter.  "},{"title":"RemoveUI​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#RemoveUI","content":"&lt;/&gt; Meter.RemoveUI(self: Meter) → () Removes the UI, if any. caution Will error if no UI is binded!  "},{"title":"SetUI​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#SetUI","content":"&lt;/&gt; Meter.SetUI( self: Meter, UI: GuiBase2d ,-- The UI it should bind to. Axis: string,-- the axis that the bar will change. &quot;X&quot; or &quot;Y&quot; only. TextUI: GuiLabel? -- Optional text label to display the meter value. ) → () Binds the meter to a UI Instance.  "},{"title":"GetPercentage​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#GetPercentage","content":"&lt;/&gt; Meter.GetPercentage(self: Meter) → number Returns the value in a percentage %  "},{"title":"SetValue​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#SetValue","content":"&lt;/&gt; Meter.SetValue( self: Meter, number: number-- The value it should be set to. ) → () Sets the value to the given one. note This will get affected by the &quot;IntegerOnly&quot; property.  "},{"title":"GetValue​","type":1,"pageTitle":"Meter","url":"/UtilityModule/api/Meter#GetValue","content":"&lt;/&gt; Meter.GetValue(self: Meter) → number Returns the value of the meter. "},{"title":"utility","type":0,"sectionRef":"#","url":"/UtilityModule/api/utility","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#functions","content":" "},{"title":"CanSeeTarget​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#CanSeeTarget","content":"Radius Function &lt;/&gt; utility.CanSeeTarget( Position: Vector3 | CFrame ,-- The position that the raycast will start on. Target: BasePart | Model ,-- The part or model that should be checked. RayCastParams: RaycastParams?,-- Optional params. DotProduct: number?,-- The minimum dot product it should have. Distance: number?-- The maximum distance it should have. ) → boolean Cast a raycast and returns a boolean indicating if the ray hit the basepart or anything inside the model. If a dot product is provided, it will check if it's facing the part too, the dot product goes from -1 (looking backwards) till 1 (looking directly at the part). If distance is provided, then it will also check if the distance is at least the number provided.  "},{"title":"newCountdown​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#newCountdown","content":"&lt;/&gt; utility.newCountdown( MaxCount: number?-- The max count that the countdown should have. ) → Countdown Returns Countdown class.  "},{"title":"newQueue​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#newQueue","content":"&lt;/&gt; utility.newQueue() → Queue Returns Queue class.  "},{"title":"newMeter​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#newMeter","content":"&lt;/&gt; utility.newMeter( Minimum: number?,-- The minimum a meter value will go. Maximum: number?-- The maximum a meter value will go. ) → Meter Returns Meter class.  "},{"title":"newTracker​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#newTracker","content":"&lt;/&gt; utility.newTracker( Origin: BasePart | Vector3 ,-- The oring vector or part that tracks. Target: BasePart | Vector3 -- The tracking vector or object. ) → Tracker Returns Tracker class.  "},{"title":"ClearAllChildrenWithName​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#ClearAllChildrenWithName","content":"Instance Function &lt;/&gt; utility:ClearAllChildrenWithName( instance: Instance ,-- The instance that will get affected by this function. Name: string-- The name that the children are required to have to get deleted. ) → () Clears All Children if the name matches up with the Name parameter.  "},{"title":"ClearAllChildrenWithClass​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#ClearAllChildrenWithClass","content":"Instance Function &lt;/&gt; utility:ClearAllChildrenWithClass( instance: Instance ,-- The instance that will get affected by this function. ClassName: string-- The class that the children are required to have to get deleted. ) → () Clears All Children if the class matches up with the ClassName parameter.  "},{"title":"ClearAllDescendantsWithName​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#ClearAllDescendantsWithName","content":"Instance Function &lt;/&gt; utility:ClearAllDescendantsWithName( instance: Instance ,-- The instance that will get affected by this function. Name: string-- The name that the descendants are required to have to get deleted. ) → () Clears All Descendants if the name matches up with the Name parameter.  "},{"title":"ClearAllDescendantsWithClass​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#ClearAllDescendantsWithClass","content":"Instance Function &lt;/&gt; utility:ClearAllDescendantsWithClass( instance: Instance ,-- The instance that will get affected by this function. Class: string-- The class that the descendants are required to have to get deleted. ) → () Clears All Descendants if the class matches up with the Class parameter.  "},{"title":"GetChildrenWithName​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetChildrenWithName","content":"Instance Function &lt;/&gt; utility:GetChildrenWithName( instance: Instance ,-- The instance that will get affected by this function. Name: string-- The name that the children are required to have. ) → {Instance } Returns all children with the same name as the given one.  "},{"title":"GetChildrenWithClass​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetChildrenWithClass","content":"Instance Function &lt;/&gt; utility:GetChildrenWithClass( instance: Instance ,-- The instance that will get affected by this function. ClassName: string-- The class that the children are required to have. ) → {Instance } Returns all children with the same class as the given one.  "},{"title":"GetDescendantsWithName​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetDescendantsWithName","content":"Instance Function &lt;/&gt; utility:GetDescendantsWithName( instance: Instance ,-- The instance that will get affected by this function. Name: string-- The name that the children are required to have. ) → {Instance } Returns all descendats with the same name as the given one.  "},{"title":"GetDescendantsWithClass​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetDescendantsWithClass","content":"Instance Function &lt;/&gt; utility:GetDescendantsWithClass( instance: Instance ,-- The instance that will get affected by this function. ClassName: string-- The class that the children are required to have. ) → {Instance } Returns all descendats with the same class as the given one.  "},{"title":"UngroupModel​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#UngroupModel","content":"Instance Function &lt;/&gt; utility:UngroupModel( Model: Model | Folder | Instance ,-- The model that should be ungrouped. Parent: Instance -- The parent that the children inside the model will be on. If none then the parent of the model. ) → () Ungroups the model (or folder or any instance for that matter) and if provided with a parent, all children of the model will go there, else the parent of the model  "},{"title":"FilterTable​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#FilterTable","content":"Table Function &lt;/&gt; utility:FilterTable( t: {T},-- The table that should be filtered. callBack: (value: T) → boolean-- The callback function that determines wheter to filter the certain value or not. MUST return a boolean. ) → {any} For every value in the table, the callback will fire with the value as the parameter. The callback MUST return a boolean. If the boolean is true on that value then it'll add to the returning table, else ignore.  "},{"title":"DeepClearTable​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#DeepClearTable","content":"Table Function &lt;/&gt; utility:DeepClearTable( SentTable: {any}-- The table that should be cleared. ) → () Clears every instance, connection, thread, key and table in the given table. The table itself will not be cleared.  "},{"title":"GetWeightOfTable​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetWeightOfTable","content":"Table Function &lt;/&gt; utility:GetWeightOfTable( SentTable: table-- The table that should be counted. ) → number Returns the total sum of the numbers in the given table. (if there aren't any numbers, it'll return 0).  "},{"title":"GetValuesWithName​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetValuesWithName","content":"Table Function &lt;/&gt; utility:GetValuesWithName( SentTable: {T},-- The table that should be filtered. Name: string-- The name of the values that should be searched. ) → {[any?]: string} Returns a table (keys included) with only the values that match the Name inside the sent table.  "},{"title":"ClearAllValuesWithName​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#ClearAllValuesWithName","content":"Table Function &lt;/&gt; utility:ClearAllValuesWithName( SentTable: table,-- The table that should be filtered. Name: string-- The name of the values that should be searched. ) → () Clears all values inside the sent table that match the given Name. Keys will not be deleted.  "},{"title":"HasValueWithName​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#HasValueWithName","content":"Table Function &lt;/&gt; utility:HasValueWithName( SentTable: table,-- The table that should be searched. Name: string-- The name of the values that should be searched. ) → boolean Returns a boolean indicating if a value with the give name exists on the table.  "},{"title":"GroupTable​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GroupTable","content":"Table Function &lt;/&gt; utility:GroupTable( SentTable: table,-- The table that should be made into a model. InstanceParent: Instance -- The parent that the model will go on. ) → Model  Creates a model with and parents all the instances in the table to it, the model will be parented to the given one. Returns the model.  "},{"title":"GetHumanoidsInRadius​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetHumanoidsInRadius","content":"Radius Function &lt;/&gt; utility:GetHumanoidsInRadius( Position: Vector3 ,-- The position that the radius will search on Radius: number,-- The radius that it will detect humanoids on. OverlapParam: OverlapParams?,-- Optional params. AliveOnly: boolean?-- If true, it will only get humanoids who are alive. ) → {Humanoid } Returns a table with all the humanoids in the position within the radius given. If AliveOnly is true, it'll only get alive humanoids.  "},{"title":"GetModelsInRadius​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetModelsInRadius","content":"Radius Function &lt;/&gt; utility:GetModelsInRadius( Position: Vector3 ,-- The position that the radius will search on Radius: number,-- The radius that it will detect models on. OverlapParam: OverlapParams?-- Optional params. ) → {Model } Returns a table with all the models in the position within the radius given.  "},{"title":"GetPartsWithNameInRadius​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetPartsWithNameInRadius","content":"Radius Function &lt;/&gt; utility:GetPartsWithNameInRadius( Position: Vector3 ,-- The position that the radius will search on Radius: number,-- The radius that it will detect models on. OverlapParam: OverlapParams?,-- Optional params. Name: string-- The name that the parts should have. ) → {BasePart } Returns a table with all the parts in the position within the radius given that have the same name as the one provided.  "},{"title":"GetPartsWithClassInRadius​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetPartsWithClassInRadius","content":"Radius Function &lt;/&gt; utility:GetPartsWithClassInRadius( Position: Vector3 ,-- The position that the radius will search on Radius: number,-- The radius that it will detect models on. OverlapParam: OverlapParams?,-- Optional params. Class: string-- The class that the parts should have. ) → {BasePart } Returns a table with all the parts in the position within the radius given that have the same class as the one provided.  "},{"title":"ConnectLimited​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#ConnectLimited","content":"Event Function &lt;/&gt; utility:ConnectLimited( Limit: number,-- The max amount of times that this even can be fired. Event: RBXScriptSignal ,-- The event that should be connected. Function: &quot;function&quot;-- The callback function. ) → RBXScriptConnection  Connect the given event to the given function and after fired for the amount provided, disconnects it immediately.  "},{"title":"ConnectBind​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#ConnectBind","content":"Event Function &lt;/&gt; utility:ConnectBind( Event: RBXScriptSignal ,-- The event that should be connected. callback: (...any) → (),-- The callback function. Bind: RBXScriptConnection -- The connection that it should be binded to. ) → RBXScriptConnection  Connect the given event to the given function. If the binded Bind is disconnected, so will this.  "},{"title":"IsACountdown​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#IsACountdown","content":"&lt;/&gt; utility:IsACountdown( t: table-- The table that should be checked. ) → boolean Returns a boolean indicating if the given table is a Countdown.  "},{"title":"IsAQueue​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#IsAQueue","content":"&lt;/&gt; utility:IsAQueue( t: table-- The table that should be checked. ) → boolean Returns a boolean indicating if the given table is a Queue.  "},{"title":"IsAMeter​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#IsAMeter","content":"&lt;/&gt; utility:IsAMeter( t: table-- The table that should be checked. ) → boolean Returns a boolean indicating if the given table is a Meter.  "},{"title":"IsATracker​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#IsATracker","content":"&lt;/&gt; utility:IsATracker( t: table-- The table that should be checked. ) → boolean Returns a boolean indicating if the given table is a Tracker.  "},{"title":"HasChildWithName​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#HasChildWithName","content":"Instance Function deprecated in v1 &lt;/&gt; This was deprecated in v1 You might want to use Instance:FindFirstChild() instead. utility:HasChildWithName( instance: Instance ,-- The instance that will get affected by this function. Name: string-- The name that the children is required to have. ) → boolean Returns a boolean indicating if there is any existing child with the given name.  "},{"title":"HasChildWithClass​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#HasChildWithClass","content":"Instance Function deprecated in v1 &lt;/&gt; This was deprecated in v1 You might want to use Instance:FindFirstChildOfClass() instead. utility:HasChildWithClass( instance: Instance ,-- The instance that will get affected by this function. ClassName: string-- The class that the children is required to have. ) → () Returns a boolean indicating if there is any existing child with the given class.  "},{"title":"HasDescendantWithName​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#HasDescendantWithName","content":"Instance Function deprecated in v1 &lt;/&gt; This was deprecated in v1 You might want to use Instance:FindFirstChild() instead. utility:HasDescendantWithName( instance: Instance ,-- The instance that will get affected by this function. Name: string-- The name that the children is required to have. ) → () Returns a boolean indicating if there is any existing descendant with the given name.  "},{"title":"HasDescendantWithClass​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#HasDescendantWithClass","content":"Instance Function deprecated in v1 &lt;/&gt; This was deprecated in v1 You might want to use Instance:FindFirstChildOfClass() instead. utility:HasDescendantWithClass( instance: Instance ,-- The instance that will get affected by this function. ClassName: string-- The class that the children is required to have. ) → () Returns a boolean indicating if there is any existing descendant with the given class.  "},{"title":"GetAllKeysWithName​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#GetAllKeysWithName","content":"Table Function deprecated in v1 &lt;/&gt; This was deprecated in v1 This thing is straight up pointless. utility:GetAllKeysWithName( SentTable: table,-- The table that should be filtered. Name: string-- The name of the keys that should be searched. ) → {[string]: any} Returns a table with only the the keys that match the name (values will not be checked) inside the sent table.  "},{"title":"ConnectOnce​","type":1,"pageTitle":"utility","url":"/UtilityModule/api/utility#ConnectOnce","content":"Event Function deprecated in v1 &lt;/&gt; This was deprecated in v1 Please use RBXScriptSignal:Once() instead. utility:ConnectOnce( Event: RBXScriptSignal ,-- The event that should be connected. Function: &quot;function&quot;-- The callback function. ) → RBXScriptConnection  Connect the given event to the given function and after fired disconnects it immediately. "}]