"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[883],{89866:e=>{e.exports=JSON.parse('{"functions":[{"name":"Start","desc":" \\nStarts the countdown, if a count is provided, the timer will start on that number","params":[{"name":"self","desc":"","lua_type":"Countdown"},{"name":"Count","desc":"The optional starting count.","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":90,"path":"src/UtilityModule/Countdown.lua"}},{"name":"SetTimer","desc":" \\nSets the timer to the number provided, resets tick.","params":[{"name":"self","desc":"","lua_type":"Countdown"},{"name":"timer","desc":"The count it should start at.","lua_type":"number"}],"returns":[],"function_type":"static","source":{"line":122,"path":"src/UtilityModule/Countdown.lua"}},{"name":"Pause","desc":" \\nPauses the countdown. If pauseTime is provided, restarts after yielding for that amount","params":[{"name":"self","desc":"","lua_type":"Countdown"},{"name":"pauseTime","desc":"If provided, count ill restart after the number given.","lua_type":"number?"}],"returns":[],"function_type":"static","source":{"line":134,"path":"src/UtilityModule/Countdown.lua"}},{"name":"Stop","desc":" \\nStops the countdown. The timer will go back to the MaxCount\\n\\n:::caution\\nIf your timer does not have a MaxCount then it will error!\\n:::","params":[{"name":"self","desc":"","lua_type":"Countdown"}],"returns":[],"function_type":"static","source":{"line":153,"path":"src/UtilityModule/Countdown.lua"}},{"name":"Destroy","desc":" \\nGets rid of the countdown.","params":[{"name":"self","desc":"","lua_type":"Countdown"}],"returns":[],"function_type":"static","source":{"line":163,"path":"src/UtilityModule/Countdown.lua"}}],"properties":[{"name":"MaxCount","desc":" \\nThe Max the timer can reach.","lua_type":"number","source":{"line":54,"path":"src/UtilityModule/Countdown.lua"}},{"name":"Timer","desc":" \\nThe timer value.","lua_type":"number","source":{"line":59,"path":"src/UtilityModule/Countdown.lua"}},{"name":"TimeToDrain","desc":" \\nThe timer needed to wait before the countdown loweres.","lua_type":"number","source":{"line":64,"path":"src/UtilityModule/Countdown.lua"}},{"name":"TimerConsuption","desc":" \\nThe amount the timer decrease by when being lowered.","lua_type":"number","source":{"line":69,"path":"src/UtilityModule/Countdown.lua"}},{"name":"UpdateEvent","desc":" \\nThe event that changes and listenes to the timer. Default is RunService.Heartbeat.","lua_type":"RBXScriptSignal","source":{"line":74,"path":"src/UtilityModule/Countdown.lua"}},{"name":"OnCount","desc":" \\nFires whenever the count lowers, returns the timer as a property.","lua_type":"RBXScriptSignal","source":{"line":79,"path":"src/UtilityModule/Countdown.lua"}},{"name":"OnFinished","desc":" \\nFires whenever the count reaches 0 or lower.","lua_type":"RBXScriptSignal","source":{"line":84,"path":"src/UtilityModule/Countdown.lua"}}],"types":[{"name":"Countdown","desc":" \\n\\nThe Countdown class.","fields":[{"name":"MaxCount","lua_type":"number","desc":""},{"name":"Timer","lua_type":"number","desc":""},{"name":"TimeToDrain","lua_type":"number","desc":""},{"name":"TimerConsumption","lua_type":"number","desc":""},{"name":"UpdateEvent","lua_type":"RBXScriptSignal","desc":""},{"name":"OnCount","lua_type":"RBXScriptSignal","desc":""},{"name":"OnFinished","lua_type":"RBXScriptSignal","desc":""}],"source":{"line":47,"path":"src/UtilityModule/Countdown.lua"}}],"name":"Countdown","desc":" \\nA countdown is a ticking value that can be customized and used for timers and other time-related functions. It can be easily\\ncustomized and be used at your will. There are events that fire whenver ticking or reaching 0 which makes it even more \\nuseful for timers and such.\\n\\n:::note\\nYou can do self:Function() even if this document says Countdown.Function(self)!\\n:::","source":{"line":18,"path":"src/UtilityModule/Countdown.lua"}}')}}]);